<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
  <script type="text/javascript">
    //declare d3 variables
    var data = <%- JSON.stringify( data[0] ); %>
    var data_habits = <%- JSON.stringify( data[1] ); %>
    console.log(data_habits)
  </script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js"></script>
  <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
  <script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<body>



<div class="jumbotron text-center">
  <div class="container">
    <a href="/" class="lang-logo">
      <img src="/lang-logo.jpg">
    </a>
    <br>
    <a type="button" class="btn btn-lg btn-default" href=""><span class="glyphicon glyphicon-flash"></span></a>
    <a type="button" class="btn btn-lg btn-primary" href=""><span class="glyphicon glyphicon-download"></span></a>
  </div>
</div>


<!-- Visualization !-->
<body>  
    
    <div class="text-center">
    <script src="https://unpkg.com/d3-3d/build/d3-3d.js"></script>
    <svg width="960" height="500"></svg>
<style type="text/css">
button {
    position: absolute;
    right: 10px;
    top: 10px;
}
</style>

<script>
    var origin = [480, 300], scale = 20, j = 10, cubesData = [], alpha = 0, beta = 0, startAngle = Math.PI/6;
    var svg    = d3.select('svg').call(d3.drag().on('drag', dragged).on('start', dragStart).on('end', dragEnd)).append('g');
    var color  = d3.scaleOrdinal(d3.schemeCategory20);
    var cubesGroup = svg.append('g').attr('class', 'cubes');
    var mx, my, mouseX, mouseY;

    var cubes3D = d3._3d()
        .shape('CUBE')
        .x(function(d){ return d.x; })
        .y(function(d){ return d.y; })
        .z(function(d){ return d.z; })
        .rotateY( startAngle + Math.PI)
        .rotateX(-startAngle)
        .origin(origin)
        .scale(scale);

    function processData(data, tt){

        /* --------- CUBES ---------*/

        var cubes = cubesGroup.selectAll('g.cube').data(data, function(d){ return d.id });

        var ce = cubes
            .enter()
            .append('g')
            .attr('class', 'cube')
            .attr('fill', function(d){ return color(d.id); })
            .attr('stroke', function(d){ return d3.color(color(d.id)).darker(2); })
            .merge(cubes)
            .sort(cubes3D.sort);

        cubes.exit().remove();

        /* --------- FACES ---------*/

        var faces = cubes.merge(ce).selectAll('path.face').data(function(d){ return d.faces; }, function(d){ return d.face; });

        faces.enter()
            .append('path')
            .attr('class', 'face')
            .attr('fill-opacity', 0.95)
            .classed('_3d', true)
            .merge(faces)
            .transition().duration(tt)
            .attr('d', cubes3D.draw);

        faces.exit().remove();

        /* --------- TEXT ---------*/

        var texts = cubes.merge(ce).selectAll('text.text').data(function(d){
            var _t = d.faces.filter(function(d){
                
                return d.face === 'top';
            });
            return [{height: d.height, centroid: _t[0].centroid, day: d.day}];
        });


        function getDayOfWeek(date) {
        const dayOfWeek = new Date(date).getDay();    
        return isNaN(dayOfWeek) ? null : 
            ['Su', 'M', 'T', 'W', 'Th', 'F', 'Sa'][dayOfWeek];
        }
        

        texts
            .enter()
            .append('text')
            .attr('class', 'text')
            .attr('dy', '-.7em')
            .attr('text-anchor', 'middle')
            .attr('font-family', 'sans-serif')
            .attr('font-weight', 'bolder')
            .attr('x', function(d){ return origin[0] + scale * d.centroid.x })
            .attr('y', function(d){ return origin[1] + scale * d.centroid.y })
            .classed('_3d', true)
            .merge(texts)
            .transition().duration(tt)
            .attr('fill', 'black')
            .attr('stroke', 'none')
            .attr('x', function(d){ return origin[0] + scale * d.centroid.x })
            .attr('y', function(d){ return origin[1] + scale * d.centroid.y })
            .tween('text', function(d){
                var that = d3.select(this);

                //console.log(that.text().slice(that.text().length-3,that.text().length))
                //interpolated after a slice of the String because the text is passed including the date...
                var i = d3.interpolateNumber(+(that.text().slice(that.text().length-3,that.text().length)), Math.abs(d.height));
                var v = () => getDayOfWeek(d.day)//d.day//d3.interpolateString(d.day, Math.abs(d.height));

                return function(t){
                    that.text(v(t) + ' | ' + i(t).toFixed(1));

                };
            });

        texts.exit().remove();

        /* --------- SORT TEXT & FACES ---------*/

        ce.selectAll('._3d').sort(d3._3d().sort);

    }






    function init(){
        cubesData = [];
        let _z = []
        let _j = []
        let _x = []
        let _h = []
        var cnt = 0;

        //Group By the Date!
        var nested_data_habits = d3.nest()
            .key(function(d) { return d.CalendarDate; }) //cat
            .rollup(function(cat) { return d3.sum(cat, function(d) {return d['Value']}); })
            .entries(data_habits);
        console.log(nested_data_habits)

        for(var z = -j; z <= j; z = z + 6){
            for(var x = -j; x <= j; x = x + 3){
            h = -1*nested_data_habits[cnt].value
            
            var _cube = makeCube(h, x, z);
                _cube.id = 'cube_' + cnt++;
                _cube.height = h;
                _cube.day = nested_data_habits[cnt-1].key
                console.log(_cube.day)

                _z.push(z)
                _j.push(j)
                _x.push(x)
                _h.push(h)

                cubesData.push(_cube);
            }
        }
        processData(cubes3D(cubesData), 1000);
    }

    function dragStart(){
        mx = d3.event.x;
        my = d3.event.y;
    }

    function dragged(){
        mouseX = mouseX || 0;
        mouseY = mouseY || 0;
        beta   = (d3.event.x - mx + mouseX) * Math.PI / 230 ;
        alpha  = (d3.event.y - my + mouseY) * Math.PI / 230  * (-1);
        processData(cubes3D.rotateY(beta + startAngle + Math.PI ).rotateX(alpha - startAngle)(cubesData), 0);
    }

    function dragEnd(){
        mouseX = d3.event.x - mx + mouseX;
        mouseY = d3.event.y - my + mouseY;
    }

    function makeCube(h, x, z){
        return [
            {x: x - 1, y: h, z: z + 1}, // FRONT TOP LEFT
            {x: x - 1, y: 0, z: z + 1}, // FRONT BOTTOM LEFT

            {x: x + 1, y: 0, z: z + 1}, // FRONT BOTTOM RIGHT
            {x: x + 1, y: h, z: z + 1}, // FRONT TOP RIGHT
            {x: x - 1, y: h, z: z - 1}, // BACK  TOP LEFT
            {x: x - 1, y: 0, z: z - 1}, // BACK  BOTTOM LEFT
            {x: x + 1, y: 0, z: z - 1}, // BACK  BOTTOM RIGHT
            {x: x + 1, y: h, z: z - 1}, // BACK  TOP RIGHT
        ];
    }

    d3.selectAll('button').on('click', init);

    init();
</script>
            
 

    <div id="my_dataviz">
    </div>
    </div>

            
        <script>
        // set the dimensions and margins of the graph
        var width = 800
            height = 400
            margin = 20

        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select("#my_dataviz")
        .append("svg")
            .attr("width", width)
            .attr("height", height)
        .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


        var nested_data = d3.nest()
        .key(function(d) { return d.Category; })
        .rollup(function(cat) { return d3.sum(cat, function(d) {return d['Time Spent (seconds)']}); })
        .entries(data);

        
        //Getting the domain for colors (how many colors do you want)
        let cat_time = Object.values(nested_data)
        var cats = [];
        for(var o in cat_time) {
            cats.push(cat_time[o].key);
        }
        var color = d3.scaleOrdinal()
        .domain(cats)
        .range(d3.schemeCategory20);
        

        //################Get Top 15########################
        //Get the values
        const array_to_be_sorted = [];
        nested_data.forEach(obj => {
            array_to_be_sorted.push(obj.value);
        })
        //Sort them
        const sorted_times = array_to_be_sorted.sort((a,b)=>a-b)
        console.log(sorted_times)
        // Slice out the top 15
        browser_times_to_show = sorted_times.slice(sorted_times.length -15, sorted_times.length+1)

        //Add them to a map if they are in the top 15
        const converted = {};
        nested_data.forEach(obj => {
            if (browser_times_to_show.includes(obj.value)){
                converted[JSON.stringify(obj.key)] = obj.value;
            }
        })
        //#######################

        // Compute the position of each group on the pie:
        var pie = d3.pie()
        .sort(null) // Do not sort group by size
        .value(function(d) {return d.value})

        var data_ready = pie(d3.entries(converted))
        


        // The arc generator
        var arc = d3.arc()
        .innerRadius(radius * 0.5)         // This is the size of the donut hole
        .outerRadius(radius * 0.8)

        // Another arc that won't be drawn. Just for labels positioning
        var outerArc = d3.arc()
        .innerRadius(radius * 0.9)
        .outerRadius(radius * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg
        .selectAll('allSlices')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', arc)
        .attr('fill', function(d){ return(color(d.data.key)) })
        .attr("stroke", "black")
        .style("stroke-width", "1px")
        .style("opacity", 0.95)

        // Add the polylines between chart and labels:
        svg
        .selectAll('allPolylines')
        .data(data_ready)
        .enter()
        .append('polyline')
            .attr("stroke", "black")
            .style("fill", "none")
            .attr("stroke-width", 1)
            .attr('points', function(d) {
            var posA = arc.centroid(d) // line insertion in the slice
            var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
            var posC = outerArc.centroid(d); // Label position = almost the same as posB
            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
            posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
            return [posA, posB, posC]
            })

        // Add the polylines between chart and labels:
        svg
        .selectAll('allLabels')
        .data(data_ready)
        .enter()
        .append('text')
        .attr("font-weight", function(d, i) {
                return 650
                })
            .text( function(d) {  return d.data.key.slice(1,d.data.key.length-1)} )
            .attr('transform', function(d) {
                var pos = outerArc.centroid(d);
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
                return 'translate(' + pos + ')';
            })
            .style('text-anchor', function(d) {
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                return (midangle < Math.PI ? 'start' : 'end')
            })
         

        </script>


<div>

    <!--<%- JSON.stringify(data) %> !-->
</div>


</body>
</html>
